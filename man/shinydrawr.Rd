% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinydrawr.R
\name{shinydrawr}
\alias{shinydrawr}
\title{Gather recorded data from UI.}
\usage{
shinydrawr(input, output, session, data, x_col, y_col = NULL,
  free_draw = FALSE, draw_start = NULL, title = NULL,
  pin_start = TRUE, x_range = NULL, y_range = NULL,
  line_style = NULL, drawn_line_color = "orangered",
  data_line_color = "steelblue", x_axis_buffer = 0.02,
  y_axis_buffer = 0.1)
}
\arguments{
\item{input, output, session}{you can ignore this as it is taken care of by shiny}

\item{data}{dataframe containing data you want to plot in two of its columns}

\item{x_col}{Name of column for x axis}

\item{y_col}{Name of column for y axis. Can be left empty if `free_draw = TRUE`.}

\item{free_draw}{Do you just want the user to draw data on a supplied x-range? I.e. no revealed line?}

\item{draw_start}{If doing a revealed line, where on the x axis to start obscuring data for drawing?}

\item{title}{Text for title, if desired.}

\item{pin_start}{Pin start of drawn line to end of shown data? Defaults to `TRUE`.}

\item{x_range}{Two element array of min and max of x range. Otherwise defaults to min and max of data.}

\item{y_range}{Two element array of min and max of y range. Otherwise defaults to min and max of data.}

\item{line_style}{List containing any styling that is desired for the default line. For options see [MDN SVG line](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line). Make sure to camelCase all attributes.}

\item{drawn_line_color}{CSS valid color for user-drawn line. Defaults to `"orangered"`.}

\item{data_line_color}{CSS valid color for data line. Defaults to `"steelblue"`.}

\item{x_axis_buffer}{Scaler for how much to pad ends of x axis if not specifying range directly. Defaults to 2% (`0.02`).}

\item{y_axis_buffer}{Scaler for how much to pad ends of y axis if not specifying range directly. Defaults to 10% (`0.1`).}

\item{shiny_message_loc}{A string containing the destination to target for shiny message passing. Used by `shinydrawr`, and can be ignored unless you're making your own shiny interface.}
}
\description{
Upon completion of line draw, returns a reactive variable that contains a vector of the y coordinates of what the user has drawn. This also includes the start point specified with `draw_start`
    This is the server component of shinydrawr. You never directly use this function but instead call it through the shiny function `callModule()`. See the example for how to do this.
}
\examples{
\dontrun{
callModule(
  shinydrawr,
  'drawr_widget',
  data,
  x_col = time,
  y_col = metric,
  draw_start = 20
)
}
}
